from selenium import webdriver
from selenium.webdriver.firefox.options import Options
import requests
import settings
import time
import os
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from os import listdir
from os.path import isfile, join


options = Options()
options.headless = True
driver = webdriver.Firefox(options=options)

onlyfiles = [f for f in listdir(settings.absolute_path_to_data_entries) if isfile(join(settings.absolute_path_to_data_entries, f))]


while (len(onlyfiles) != 0):
    file =  os.path.abspath("data entries/%s" %onlyfiles[0])
    name = onlyfiles[0].split('.')[0] + '.pdb'
    onlyfiles.pop(0)
    print("\n ******************************** STARTING ***************************************** \n")

    driver.get("http://www.cbs.dtu.dk/services/TCRpMHCmodels/index.php")
    print("headless chrome initialized")

    #fasta file input
    text = driver.find_element_by_name("fasta")
    file_input = driver.find_element_by_css_selector('#uploadfile')
    file_input.send_keys(file)
    print("file opened")   

    #modeller key
    modeller_key = driver.find_element_by_name("modellerkey")
    modeller_key.send_keys("MODELIRANJE")
    print("key entered")

    #submit click
    submit = driver.find_element_by_xpath("/html/body/div/div[2]/div[2]/div/form/div[4]/div/input")
    submit.click()

    #next page
    print("switch to next page")
    print("wait for download")

    #wait for download
    timeout = 300000000
    try:
        element_present = EC.presence_of_element_located((By.CSS_SELECTOR, '#bs-example-navbar-collapse-1 > ul.nav.navbar-nav.navbar-right.example-label.download-btn > div > a'))
        WebDriverWait(driver, timeout).until(element_present)
           
    except TimeoutException:
        print("Timed out waiting for page to load")
        continue
    else:
        links = driver.find_element_by_link_text('Download PDB File')
        time.sleep(50)
        url = links.get_attribute('href')
        r =requests.get(url)
        path_to_file = settings.absolute_path_to_data_results + name

        with open(path_to_file, 'wb') as my_file:
            my_file.write(r.content)
            print("File downloaded")
        print("next file \n ")





    









